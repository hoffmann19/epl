standings$rank = row_number(standings$game_week)
#ranking to get actual standing rank for each gameweek
standings$standing_rank <- ave(standings$rank, standings$game_week, FUN = seq_along)
#grab only standings
standings = standings[,c("team_gameweek_id",
"standing_rank")]
#adding gameweek standing to combineddb
combineddb = left_join(combineddb, standings, by= "team_gameweek_id")
combineddb = rename(combineddb, team_standing_rank = standing_rank)
combineddb = left_join(combineddb, standings, by = c("opp_team_gameweek_id" = "team_gameweek_id"))
combineddb = rename(combineddb, opp_standing_rank = standing_rank)
#add difference in standings
combineddb$standing_difference = as.numeric(combineddb$opp_standing_rank) - as.numeric(combineddb$team_standing_rank)
setwd("/Users/admin/Dropbox/dataprojects/epl")
write.csv(combineddb, file = "newest_df.csv")
#install.packages("rvest")
library("rvest")
library(data.table)
library(stringr)
library(dplyr)
library(stringi)
library(DescTools)
#date table for every day possible in season
itemizeDates <- function(startDate="08-11-17", endDate=Sys.Date(),
format="%m-%d-%y") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
dates = as.data.table(
itemizeDates(startDate="08-11-17", endDate=Sys.Date())
)
dates$V1=format(strptime(dates$V1,"%m-%d-%y"),"%Y%m%d")
##every epl team code on nbc
team_numbers = data.frame(team_number=c("21","1153","1150",'1133','25','90','28','1140','31',
'32','33','34','36','37','1139','1141','39','97',
'406','40'))
##making uniqueid for gamecode
gamecode= merge(team_numbers,dates)
gamecodetwo=gamecode
gamecode$full = if_else(stri_length(gamecode$team_number)==2, paste0('100',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('10',gamecode$team_number),
paste0('1',gamecode$team_number)))
gamecodetwo$full = if_else(stri_length(gamecode$team_number)==2, paste0('200',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('20',gamecode$team_number),
paste0('2',gamecode$team_number)))
gamecodefinal = data.frame(gamecode = paste0(gamecode$V1,gamecode$full))
gamecodefinaltwo = data.frame(gamecode = paste0(gamecodetwo$V1,gamecodetwo$full))
gamecodefinal=rbind(gamecodefinal,gamecodefinaltwo)
game_vector <- gamecodefinal[['gamecode']]
##removing unnecessary tables
rm(gamecode, team_numbers, dates, gamecodefinal, gamecodefinaltwo, gamecodetwo)
#finding valid URLs
ListofURL = c()
count=0
z=0
starttime = Sys.time()
for (i in game_vector){
z=z+1
url = sprintf("http://scores.nbcsports.com/epl/boxscore.asp?gamecode=%s&show=pstats&ref=",game_vector[z])
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
if(length(population)==0)next
ListofURL = append(ListofURL,values =url)
count=count+1
print(url)
}
endtime=Sys.time()
print(endtime-starttime)
beepr::beep(1)
##scraper to put valid urls data into final df
count=0
for (i in ListofURL){
url = ListofURL[count+1]
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
population <- population[[1]]
db= population[3:18,1:3]
db = setNames(data.frame(t(db[,-2])), db[,2])
colnames(db)[1] <- "team"
db$team = str_sub(db$team, start= -3)
db$date = str_sub(
str_split_fixed(string = url, pattern = "gamecode=", n= 2)[,2],
end = 8)
db$Opponent[1] = db$team[2]
db$Opponent[2] = db$team[1]
db$GoalsAllowed[1] = as.integer(as.character(db$Goals[2]))
db$GoalsAllowed[2] = as.integer(as.character(db$Goals[1]))
db$GameID = paste0(db$team[1],'v',db$team[2],db$date[1])
db$home_away = if_else(db$team==db$team[1],'home','away')
if(count==0){
combineddb = db }
else {
combineddb= rbind(combineddb,db) }
count = count+1
print(count)
}
beepr::beep(sound=1)
#removing unnecessary tables
rm(db, population)
#making copy of combineddb to test
# test = combineddb
#converting ball possession to decimal
combineddb$`Ball Possession` = as.numeric(sub("%","",combineddb$`Ball Possession`))/100
#converting all factors to numeric
indx = sapply(combineddb, is.factor)
combineddb[indx] = lapply(combineddb[indx], function(x) as.numeric(as.character(x)))
str(combineddb)
#adding columns
combineddb$win_flag = if_else(combineddb$Goals> combineddb$GoalsAllowed, true = 1, false = 0)
combineddb$gameweek_points = if_else(combineddb$Goals>combineddb$GoalsAllowed, true = 3,
if_else(combineddb$Goals == combineddb$GoalsAllowed, true = 1, false = 0))
combineddb$goal_conversion_total_shots = combineddb$Goals/combineddb$Shots
combineddb$goal_conversion_shots_on_goal = combineddb$Goals/combineddb$`Shots on Goal`
combineddb$unassisted_goals = combineddb$Goals- combineddb$Assists
combineddb$passes_per_goal = combineddb$Passes/combineddb$Goals
combineddb$fouls_per_yellow_card = combineddb$`Fouls Committed`/combineddb$`Cautions/Yellow Cards`
combineddb$fouls_per_red_card = combineddb$`Fouls Committed`/combineddb$`Red Cards`
combineddb$goal_difference = combineddb$Goals- combineddb$GoalsAllowed
#adding gameweek - scraper doesn't necessarily pull in sequential order
combineddb = combineddb %>% group_by(team) %>%
mutate(game_week = rank(date)) %>%
arrange(date)
#making team unique ids by gameweek
combineddb$team_gameweek_id = paste(combineddb$team, combineddb$game_week, sep = "-")
combineddb$opp_team_gameweek_id = paste(combineddb$Opponent, combineddb$game_week, sep = "-")
#adding cumulative points
combineddb = combineddb %>% group_by(team) %>%
mutate(cumu_points = cumsum(gameweek_points))
#adding cumulative goal difference
combineddb = combineddb %>% group_by(team) %>%
mutate(cumu_goal_difference = cumsum(goal_difference))
#adding cumulative goal difference
combineddb = combineddb %>% group_by(team) %>%
mutate(cumu_goals = cumsum(Goals))
#new table with standings by gameweek
standings = combineddb[,c("team",
"game_week",
"cumu_points",
"cumu_goal_difference",
"cumu_goals")]
#sorting by game week asc, cumu_points desc, cumu_goal_difference
standings = standings[
order( standings$game_week,
-standings$cumu_points,
-standings$cumu_goal_difference,
-standings$cumu_goals),
]
#making uniqueid in standings table
standings$team_gameweek_id = paste(standings$team, standings$game_week, sep="-")
#row_num for standings table
standings$rank = row_number(standings$game_week)
#ranking to get actual standing rank for each gameweek
standings$standing_rank <- ave(standings$rank, standings$game_week, FUN = seq_along)
#grab only standings
standings = standings[,c("team_gameweek_id",
"standing_rank")]
#adding gameweek standing to combineddb
combineddb = left_join(combineddb, standings, by= "team_gameweek_id")
combineddb = rename(combineddb, team_standing_rank = standing_rank)
combineddb = left_join(combineddb, standings, by = c("opp_team_gameweek_id" = "team_gameweek_id"))
combineddb = rename(combineddb, opp_standing_rank = standing_rank)
#add difference in standings
combineddb$standing_difference = as.numeric(combineddb$opp_standing_rank) - as.numeric(combineddb$team_standing_rank)
setwd("/Users/admin/Dropbox/dataprojects/epl")
write.csv(combineddb, file = "newest_df.csv")
View(combineddb)
View(standings)
View(combineddb)
#install.packages("rvest")
library("rvest")
library(data.table)
library(stringr)
library(dplyr)
library(stringi)
library(DescTools)
#date table for every day possible in season
itemizeDates <- function(startDate="08-11-17", endDate=Sys.Date(),
format="%m-%d-%y") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
dates = as.data.table(
itemizeDates(startDate="08-11-17", endDate=Sys.Date())
)
dates$V1=format(strptime(dates$V1,"%m-%d-%y"),"%Y%m%d")
##every epl team code on nbc
team_numbers = data.frame(team_number=c("21","1153","1150",'1133','25','90','28','1140','31',
'32','33','34','36','37','1139','1141','39','97',
'406','40'))
##making uniqueid for gamecode
gamecode= merge(team_numbers,dates)
gamecodetwo=gamecode
gamecode$full = if_else(stri_length(gamecode$team_number)==2, paste0('100',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('10',gamecode$team_number),
paste0('1',gamecode$team_number)))
gamecodetwo$full = if_else(stri_length(gamecode$team_number)==2, paste0('200',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('20',gamecode$team_number),
paste0('2',gamecode$team_number)))
gamecodefinal = data.frame(gamecode = paste0(gamecode$V1,gamecode$full))
gamecodefinaltwo = data.frame(gamecode = paste0(gamecodetwo$V1,gamecodetwo$full))
gamecodefinal=rbind(gamecodefinal,gamecodefinaltwo)
game_vector <- gamecodefinal[['gamecode']]
##removing unnecessary tables
rm(gamecode, team_numbers, dates, gamecodefinal, gamecodefinaltwo, gamecodetwo)
#finding valid URLs
ListofURL = c()
count=0
z=0
starttime = Sys.time()
for (i in game_vector){
z=z+1
url = sprintf("http://scores.nbcsports.com/epl/boxscore.asp?gamecode=%s&show=pstats&ref=",game_vector[z])
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
if(length(population)==0)next
ListofURL = append(ListofURL,values =url)
count=count+1
print(url)
}
endtime=Sys.time()
print(endtime-starttime)
beepr::beep(1)
##scraper to put valid urls data into final df
count=0
for (i in ListofURL){
url = ListofURL[count+1]
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
population <- population[[1]]
db= population[3:18,1:3]
db = setNames(data.frame(t(db[,-2])), db[,2])
colnames(db)[1] <- "team"
db$team = str_sub(db$team, start= -3)
db$date = str_sub(
str_split_fixed(string = url, pattern = "gamecode=", n= 2)[,2],
end = 8)
db$Opponent[1] = db$team[2]
db$Opponent[2] = db$team[1]
db$GoalsAllowed[1] = as.integer(as.character(db$Goals[2]))
db$GoalsAllowed[2] = as.integer(as.character(db$Goals[1]))
db$GameID = paste0(db$team[1],'v',db$team[2],db$date[1])
db$home_away = if_else(db$team==db$team[1],'home','away')
if(count==0){
combineddb = db }
else {
combineddb= rbind(combineddb,db) }
count = count+1
print(count)
}
beepr::beep(sound=1)
#removing unnecessary tables
rm(db, population)
#making copy of combineddb to test
# test = combineddb
#converting ball possession to decimal
combineddb$`Ball Possession` = as.numeric(sub("%","",combineddb$`Ball Possession`))/100
#converting all factors to numeric
indx = sapply(combineddb, is.factor)
combineddb[indx] = lapply(combineddb[indx], function(x) as.numeric(as.character(x)))
str(combineddb)
#adding columns
combineddb$win_flag = if_else(combineddb$Goals> combineddb$GoalsAllowed, true = 1, false = 0)
combineddb$gameweek_points = if_else(combineddb$Goals>combineddb$GoalsAllowed, true = 3,
if_else(combineddb$Goals == combineddb$GoalsAllowed, true = 1, false = 0))
combineddb$goal_conversion_total_shots = combineddb$Goals/combineddb$Shots
combineddb$goal_conversion_shots_on_goal = combineddb$Goals/combineddb$`Shots on Goal`
combineddb$unassisted_goals = combineddb$Goals- combineddb$Assists
combineddb$passes_per_goal = combineddb$Passes/combineddb$Goals
combineddb$fouls_per_yellow_card = combineddb$`Fouls Committed`/combineddb$`Cautions/Yellow Cards`
combineddb$fouls_per_red_card = combineddb$`Fouls Committed`/combineddb$`Red Cards`
combineddb$goal_difference = combineddb$Goals- combineddb$GoalsAllowed
#adding gameweek - scraper doesn't necessarily pull in sequential order
combineddb = combineddb %>% group_by(team) %>%
mutate(game_week = rank(date)) %>%
arrange(date)
#making team unique ids by gameweek
combineddb$team_gameweek_id = paste(combineddb$team, combineddb$game_week, sep = "-")
combineddb$opp_team_gameweek_id = paste(combineddb$Opponent, combineddb$game_week, sep = "-")
#adding cumulative points
combineddb = combineddb %>% group_by(team) %>%
mutate(cumu_points = cumsum(gameweek_points))
#adding cumulative goal difference
combineddb = combineddb %>% group_by(team) %>%
mutate(cumu_goal_difference = cumsum(goal_difference))
#adding cumulative goal difference
combineddb = combineddb %>% group_by(team) %>%
mutate(cumu_goals = cumsum(Goals))
#new table with standings by gameweek
standings = combineddb[,c("team",
"game_week",
"cumu_points",
"cumu_goal_difference",
"cumu_goals")]
#sorting by game week asc, cumu_points desc, cumu_goal_difference
standings = standings[
order( standings$game_week,
-standings$cumu_points,
-standings$cumu_goal_difference,
-standings$cumu_goals),
]
#making uniqueid in standings table
standings$team_gameweek_id = paste(standings$team, standings$game_week, sep="-")
#row_num for standings table
standings$rank = row_number(standings$game_week)
#ranking to get actual standing rank for each gameweek
standings$standing_rank <- ave(standings$rank, standings$game_week, FUN = seq_along)
#grab only standings
standings = standings[,c("team_gameweek_id",
"standing_rank")]
#adding gameweek standing to combineddb
combineddb = left_join(combineddb, standings, by= "team_gameweek_id")
combineddb = rename(combineddb, team_standing_rank = standing_rank)
combineddb = left_join(combineddb, standings, by = c("opp_team_gameweek_id" = "team_gameweek_id"))
combineddb = rename(combineddb, opp_standing_rank = standing_rank)
#add difference in standings
combineddb$standing_difference = as.numeric(combineddb$opp_standing_rank) - as.numeric(combineddb$team_standing_rank)
setwd("/Users/admin/Dropbox/dataprojects/epl")
write.csv(combineddb, file = "newest_df.csv")
View(combineddb)
View(combineddb)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = 'choose a number',
value = 25,
min = 1,
max = 100),
plotOutput(outputId = "plot")
)
server = function(input, output) {
output$hist = renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui, server = server)
library(library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Soccer Analysis"),
sidebarPanel(),
mainPanel()
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Soccer Analysis"),
sidebarPanel(),
mainPanel()
))
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = 'choose a number',
value = 25,
min = 1,
max = 100),
plotOutput(outputId = "plot")
)
server = function(input, output) {
output$hist = renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui, server = server)
library(shiny)
ui = fluidPage(
sliderInput(inputId = "num",
label = 'choose a number',
value = 25,
min = 1,
max = 100),
plotOutput(outputId = "plot")
)
server = function(input, output) {
output$hist = renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui, server = server)
library(shiny)
setwd("/users/admin")
pwd
getwd()
setwd("/users/admin/dropbox/dataprojects/epl/shiny")
library(shiny)
setwd("/users/admin/dropbox/dataprojects/epl/shiny")
getwd()
shinyServer(
pageWithSidebar(
headerPanel("My First Shiny App"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
runApp
getwd()
library(shiny)
setwd("/users/admin/dropbox/dataprojects/epl/shiny")
getwd()
shinyServer(
pageWithSidebar(
headerPanel("My First Shiny App"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
runApp()
library(shiny)
setwd("/users/admin/dropbox/dataprojects/epl/shiny")
getwd()
shinyServer(
pageWithSidebar(
headerPanel("My First Shiny App"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
runApp()
runApp
library(shiny)
setwd("/users/admin/dropbox/dataprojects/epl/shiny")
getwd()
shinyServer(
pageWithSidebar(
headerPanel("My First Shiny App"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
runApp
install.packages('shinydashboard')
library(shinydashboard)
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = 'This is the header'),
dashboardSidebar(
menuItem("Dashboard"),
menuSubItem("dashboard finance"),
menuSubItem("Dashboard Sales"),
menuItem("Detailed Analysis"),
menuItem("Raw Data")
),
dashboardBody()
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
shinyServer(function(input,output){
output$histogram = renderPlot({
hist(combineddb$Shots)
})
}
)
library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = 'This is the header'),
dashboardSidebar(
menuItem("Dashboard"),
menuSubItem("dashboard finance"),
menuSubItem("Dashboard Sales"),
menuItem("Detailed Analysis"),
menuItem("Raw Data")
),
dashboardBody(
fluidRow(
box(plotOutput("histogram"))
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
