# combineddb$Shots = as.numeric(as.character(combineddb$Shots))
# combineddb$Passes = as.numeric(as.character(combineddb$Passes))
# combineddb$`Shots on Goal` = as.numeric(as.character(combineddb$`Shots on Goal`))
View(combineddb)
#install.packages("rvest")
library("rvest")
library(data.table)
library(stringr)
library(dplyr)
library(stringi)
#date table for every day possible in season
itemizeDates <- function(startDate="08-11-17", endDate=Sys.Date(),
format="%m-%d-%y") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
dates = as.data.table(
itemizeDates(startDate="08-11-17", endDate=Sys.Date())
)
dates$V1=format(strptime(dates$V1,"%m-%d-%y"),"%Y%m%d")
##every epl team code on nbc
team_numbers = data.frame(team_number=c("21","1153","1150",'1133','25','90','28','1140','31',
'32','33','34','36','37','1139','1141','39','97',
'406','40'))
##making uniqueid for gamecode
gamecode= merge(team_numbers,dates)
gamecodetwo=gamecode
gamecode$full = if_else(stri_length(gamecode$team_number)==2, paste0('100',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('10',gamecode$team_number),
paste0('1',gamecode$team_number)))
gamecodetwo$full = if_else(stri_length(gamecode$team_number)==2, paste0('200',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('20',gamecode$team_number),
paste0('2',gamecode$team_number)))
gamecodefinal = data.frame(gamecode = paste0(gamecode$V1,gamecode$full))
gamecodefinaltwo = data.frame(gamecode = paste0(gamecodetwo$V1,gamecodetwo$full))
gamecodefinal=rbind(gamecodefinal,gamecodefinaltwo)
game_vector <- gamecodefinal[['gamecode']]
##removing unnecessary tables
rm(gamecode, team_numbers, dates, gamecodefinal, gamecodefinaltwo, gamecodetwo)
#finding valid URLs
ListofURL = c()
count=0
z=0
starttime = Sys.time()
for (i in game_vector){
z=z+1
url = sprintf("http://scores.nbcsports.com/epl/boxscore.asp?gamecode=%s&show=pstats&ref=",game_vector[z])
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
if(length(population)==0)next
ListofURL = append(ListofURL,values =url)
count=count+1
print(url)
}
endtime=Sys.time()
print(endtime-starttime)
beepr::beep(1)
##scraper to put valid urls data into final df
count=0
for (i in ListofURL){
url = ListofURL[count+1]
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
population <- population[[1]]
db= population[3:18,1:3]
db = setNames(data.frame(t(db[,-2])), db[,2])
colnames(db)[1] <- "team"
db$team = str_sub(db$team, start= -3)
db$date = str_sub(
str_split_fixed(string = url, pattern = "gamecode=", n= 2)[,2],
end = 8)
db$Opponent[1] = db$team[2]
db$Opponent[2] = db$team[1]
db$GameID = paste0(db$team[1],'v',db$team[2],db$date[1])
db$home_away = if_else(db$team==db$team[1],'home','away')
if(count==0){
combineddb = db }
else {
combineddb= rbind(combineddb,db) }
count = count+1
print(count)
}
beepr::beep(sound=1)
#removing unnecessary tables
rm(db, population)
##checking data types
# str(combineddb)
# str(combineddb)
# combineddb$Shots = as.numeric(as.character(combineddb$Shots))
# combineddb$Passes = as.numeric(as.character(combineddb$Passes))
# combineddb$`Shots on Goal` = as.numeric(as.character(combineddb$`Shots on Goal`))
View(combineddb)
#install.packages("rvest")
library("rvest")
library(data.table)
library(stringr)
library(dplyr)
library(stringi)
#date table for every day possible in season
itemizeDates <- function(startDate="08-11-17", endDate=Sys.Date(),
format="%m-%d-%y") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
dates = as.data.table(
itemizeDates(startDate="08-11-17", endDate=Sys.Date())
)
dates$V1=format(strptime(dates$V1,"%m-%d-%y"),"%Y%m%d")
##every epl team code on nbc
team_numbers = data.frame(team_number=c("21","1153","1150",'1133','25','90','28','1140','31',
'32','33','34','36','37','1139','1141','39','97',
'406','40'))
##making uniqueid for gamecode
gamecode= merge(team_numbers,dates)
gamecodetwo=gamecode
gamecode$full = if_else(stri_length(gamecode$team_number)==2, paste0('100',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('10',gamecode$team_number),
paste0('1',gamecode$team_number)))
gamecodetwo$full = if_else(stri_length(gamecode$team_number)==2, paste0('200',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('20',gamecode$team_number),
paste0('2',gamecode$team_number)))
gamecodefinal = data.frame(gamecode = paste0(gamecode$V1,gamecode$full))
gamecodefinaltwo = data.frame(gamecode = paste0(gamecodetwo$V1,gamecodetwo$full))
gamecodefinal=rbind(gamecodefinal,gamecodefinaltwo)
game_vector <- gamecodefinal[['gamecode']]
##removing unnecessary tables
rm(gamecode, team_numbers, dates, gamecodefinal, gamecodefinaltwo, gamecodetwo)
#finding valid URLs
ListofURL = c()
count=0
z=0
starttime = Sys.time()
for (i in game_vector){
z=z+1
url = sprintf("http://scores.nbcsports.com/epl/boxscore.asp?gamecode=%s&show=pstats&ref=",game_vector[z])
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
if(length(population)==0)next
ListofURL = append(ListofURL,values =url)
count=count+1
print(url)
}
endtime=Sys.time()
print(endtime-starttime)
beepr::beep(1)
##scraper to put valid urls data into final df
count=0
for (i in ListofURL){
url = ListofURL[count+1]
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
population <- population[[1]]
db= population[3:18,1:3]
db = setNames(data.frame(t(db[,-2])), db[,2])
colnames(db)[1] <- "team"
db$team = str_sub(db$team, start= -3)
db$date = str_sub(
str_split_fixed(string = url, pattern = "gamecode=", n= 2)[,2],
end = 8)
db$Opponent[1] = db$team[2]
db$Opponent[2] = db$team[1]
db$GameID = paste0(db$team[1],'v',db$team[2],db$date[1])
db$home_away = if_else(db$team==db$team[1],'home','away')
if(count==0){
combineddb = db }
else {
combineddb= rbind(combineddb,db) }
count = count+1
print(count)
}
beepr::beep(sound=1)
#removing unnecessary tables
rm(db, population)
##checking data types
# str(combineddb)
# str(combineddb)
# combineddb$Shots = as.numeric(as.character(combineddb$Shots))
# combineddb$Passes = as.numeric(as.character(combineddb$Passes))
# combineddb$`Shots on Goal` = as.numeric(as.character(combineddb$`Shots on Goal`))
#change wd and csv name
setwd("C:/Users/hoffmads/OneDrive - Maritz LLC/Scrum/In Progress/churn_model/csvs_from_sql")
df = read.csv("wecom_6mo_10_03_2017.csv")
df = rbind(df, read.csv("wecom_6mo_0403_2017.csv")) #unions another timeframe to get bigger sample size
## packages
library("xgboost")  # the main algorithm
library("archdata") # for the sample dataset
library("caret")    # for the confusionmatrix() function (also needs e1071 package)
library("e1071")
library("doSNOW")
library("kernlab")
library("ranger")
library("C50")
library("caTools")
library("plyr")
library("caretEnsemble")
library("dplyr")
#converting all factors to numeric
str(df)
indx = sapply(df, is.factor)
df[indx] = lapply(df[indx], function(x) as.numeric(as.character(x)))
str(df)
#converting Y to factor
df$left_in_time_frame1 = as.factor(df$left_in_time_frame1)
#taking care of NA
df[, 4:ncol(df)][is.na(df[, 4:ncol(df)])] <- 0
##USING H20
# install.packages("h2o")
library(h2o)
h2o.init()
##splits in h2o
h2o_df = as.h2o(df, destination_frame = "final2_h2o")
splits = h2o.splitFrame(
h2o_df,
c(.6,0.2), #creates splits of 60% and 20%
seed = 1234
)
h2o_train = h2o.assign(splits[[1]], "train.hex")
h2o_valid = h2o.assign(splits[[2]], "valid.hex")
h2o_test = h2o.assign(splits[[3]], "test.hex")
#putting actual restults from test into data.frame format
df_test = as.data.frame(h2o_test)
#dropping certain columns
drops <- c("pax_id","currently_active_flag","ecards_received_tf1","recs_received_tf1","PB_amount_received_tf1","amount_received_tf1","PB_rec_received_tf1","recs_given_tf1")
h2o_train = h2o_train[ , !(names(h2o_train) %in% drops)]
h2o_valid = h2o_valid[ , !(names(h2o_valid) %in% drops)]
h2o_test = h2o_test[ , !(names(h2o_test) %in% drops)]
h2o_automl_frame = h2o_df[ , !(names(h2o_df) %in% drops)]
#h2o randomForest model
h2o_start = Sys.time()
h2o_rf_model = h2o.randomForest(y = c("left_in_time_frame1"),
training_frame = h2o_train,
validation_frame = h2o_valid,
# stopping_rounds = 2, #stop fitting new trees when the 2-tree average is with .001(default)
# of the prior two 2-tree averages
ntrees = 200,
score_each_iteration = T, #predict against training and validation for each tree.
# default will skip several
seed = 1000
)
h2o_end = Sys.time()
h2o_time = h2o_end - h2o_start
h2o_time
##evaluating rf model
summary(h2o_rf_model)
#importance for RF Model
h2o.varimp_plot(h2o_rf_model)
importance = h2o.varimp(h2o_rf_model)
importance = importance[order(-importance$scaled_importance),]
#predicting using rf model
pred_rf = h2o.predict(object = h2o_rf_model,
newdata = h2o_test)
pred_rf_frame = as.data.frame(pred_rf)
write.csv(pred_rf_frame, file = "pred_rf.csv")
##h20 gbm
h2o_gbm_start = Sys.time()
gbm1 = h2o.gbm(
training_frame = h2o_train,
validation_frame = h2o_valid,
y = c("left_in_time_frame1"),
seed = 1000,
max_depth = 50
)
summary(gbm1)
h2o_gbm_end = Sys.time()
gbm_duration = h2o_gbm_end - h2o_gbm_start
gbm_duration
h2o.varimp_plot(gbm1)
#predicting using gbm model
pred_gbm = h2o.predict(object = gbm1,
newdata = h2o_test)
pred_gbm_frame = as.data.frame(pred_gbm)
write.csv(pred_gbm_frame, file = "pred_gb.csv")
##h20 Automated Machine Learning
h2o_autoML_start = Sys.time()
auto_ml = h2o.automl(
training_frame = h2o_automl_frame,
# validation_frame = h2o_valid,
# leaderboard_frame = h2o_test,
y = c("left_in_time_frame1"),
seed = 1000,
max_runtime_secs = 1000,
max_models =  20
)
lb = auto_ml@leaderboard
lb
auto_ml@leader
pred_aml = h2o.predict(auto_ml@leader,h2o_test)
pred_aml = as.data.frame(pred_aml)
test_preds = data.frame(df_test$pax_id, pred_rf_frame, pred_gbm_frame, pred_aml)
summary(auto_ml)
h2o_autoML_end = Sys.time()
autoML_duration = h2o_autoML_end - h2o_autoML_start
autoML_duration
h2o.varimp_plot(auto_ml)
test = subset(test_preds, test_preds$predict.2 == 1)
#done
library(beepr)
beep(sound = 5)
h2o.shutdown(prompt = TRUE)
View(df)
View(df)
View(test_preds)
write.csv(test_preds, file = "wecom_preds.csv")
pred_aml2 = h2o.predict(auto_ml@leader, h2o_train)
write.csv(pred_aml2, file = "wecom_preds.csv")
write.csv(pred_aml2, file = "wecom_preds.csv")
write.csv(pred_aml2, file = "wecom_preds2.csv")
pred_aml2 = h2o.predict(auto_ml@leader, h2o_train)
write.csv(pred_aml2, file = "wecom_preds2.csv")
pred_aml2 = h2o.predict(auto_ml@leader, h2o_automl_frame)
pred_aml2 = data.frame(pred_aml2)
pred_aml2 = as.data.frame(pred_aml2)
write.csv(pred_aml2, file = "wecom_preds2.csv")
pred_aml2 = data.frame(df$pax_id, pred_aml2)
write.csv(pred_aml2, file = "wecom_preds2.csv")
#install.packages("rvest")
library("rvest")
library(data.table)
library(stringr)
library(dplyr)
library(stringi)
#date table for every day possible in season
itemizeDates <- function(startDate="08-11-17", endDate=Sys.Date(),
format="%m-%d-%y") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
dates = as.data.table(
itemizeDates(startDate="08-11-17", endDate=Sys.Date())
)
dates$V1=format(strptime(dates$V1,"%m-%d-%y"),"%Y%m%d")
##every epl team code on nbc
team_numbers = data.frame(team_number=c("21","1153","1150",'1133','25','90','28','1140','31',
'32','33','34','36','37','1139','1141','39','97',
'406','40'))
##making uniqueid for gamecode
gamecode= merge(team_numbers,dates)
gamecodetwo=gamecode
gamecode$full = if_else(stri_length(gamecode$team_number)==2, paste0('100',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('10',gamecode$team_number),
paste0('1',gamecode$team_number)))
gamecodetwo$full = if_else(stri_length(gamecode$team_number)==2, paste0('200',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('20',gamecode$team_number),
paste0('2',gamecode$team_number)))
gamecodefinal = data.frame(gamecode = paste0(gamecode$V1,gamecode$full))
gamecodefinaltwo = data.frame(gamecode = paste0(gamecodetwo$V1,gamecodetwo$full))
gamecodefinal=rbind(gamecodefinal,gamecodefinaltwo)
game_vector <- gamecodefinal[['gamecode']]
##removing unnecessary tables
rm(gamecode, team_numbers, dates, gamecodefinal, gamecodefinaltwo, gamecodetwo)
#finding valid URLs
ListofURL = c()
count=0
z=0
starttime = Sys.time()
for (i in game_vector){
z=z+1
url = sprintf("http://scores.nbcsports.com/epl/boxscore.asp?gamecode=%s&show=pstats&ref=",game_vector[z])
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
if(length(population)==0)next
ListofURL = append(ListofURL,values =url)
count=count+1
print(url)
}
endtime=Sys.time()
print(endtime-starttime)
beepr::beep(1)
##scraper to put valid urls data into final df
count=0
for (i in ListofURL){
url = ListofURL[count+1]
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
population <- population[[1]]
db= population[3:18,1:3]
db = setNames(data.frame(t(db[,-2])), db[,2])
colnames(db)[1] <- "team"
db$team = str_sub(db$team, start= -3)
db$date = str_sub(
str_split_fixed(string = url, pattern = "gamecode=", n= 2)[,2],
end = 8)
db$Opponent[1] = db$team[2]
db$Opponent[2] = db$team[1]
db$GameID = paste0(db$team[1],'v',db$team[2],db$date[1])
db$home_away = if_else(db$team==db$team[1],'home','away')
if(count==0){
combineddb = db }
else {
combineddb= rbind(combineddb,db) }
count = count+1
print(count)
}
beepr::beep(sound=1)
#removing unnecessary tables
rm(db, population)
##checking data types
# str(combineddb)
# str(combineddb)
# combineddb$Shots = as.numeric(as.character(combineddb$Shots))
# combineddb$Passes = as.numeric(as.character(combineddb$Passes))
# combineddb$`Shots on Goal` = as.numeric(as.character(combineddb$`Shots on Goal`))
#install.packages("rvest")
library("rvest")
library(data.table)
library(stringr)
library(dplyr)
library(stringi)
#date table for every day possible in season
itemizeDates <- function(startDate="08-11-17", endDate=Sys.Date(),
format="%m-%d-%y") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
dates = as.data.table(
itemizeDates(startDate="08-11-17", endDate=Sys.Date())
)
dates$V1=format(strptime(dates$V1,"%m-%d-%y"),"%Y%m%d")
##every epl team code on nbc
team_numbers = data.frame(team_number=c("21","1153","1150",'1133','25','90','28','1140','31',
'32','33','34','36','37','1139','1141','39','97',
'406','40'))
##making uniqueid for gamecode
gamecode= merge(team_numbers,dates)
gamecodetwo=gamecode
gamecode$full = if_else(stri_length(gamecode$team_number)==2, paste0('100',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('10',gamecode$team_number),
paste0('1',gamecode$team_number)))
gamecodetwo$full = if_else(stri_length(gamecode$team_number)==2, paste0('200',gamecode$team_number),
if_else(stri_length(gamecode$team_number)==3, paste0('20',gamecode$team_number),
paste0('2',gamecode$team_number)))
gamecodefinal = data.frame(gamecode = paste0(gamecode$V1,gamecode$full))
gamecodefinaltwo = data.frame(gamecode = paste0(gamecodetwo$V1,gamecodetwo$full))
gamecodefinal=rbind(gamecodefinal,gamecodefinaltwo)
game_vector <- gamecodefinal[['gamecode']]
##removing unnecessary tables
rm(gamecode, team_numbers, dates, gamecodefinal, gamecodefinaltwo, gamecodetwo)
#finding valid URLs
ListofURL = c()
count=0
z=0
starttime = Sys.time()
for (i in game_vector){
z=z+1
url = sprintf("http://scores.nbcsports.com/epl/boxscore.asp?gamecode=%s&show=pstats&ref=",game_vector[z])
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
if(length(population)==0)next
ListofURL = append(ListofURL,values =url)
count=count+1
print(url)
}
endtime=Sys.time()
print(endtime-starttime)
beepr::beep(1)
##scraper to put valid urls data into final df
count=0
for (i in ListofURL){
url = ListofURL[count+1]
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="shsIFBBoxPlayerStats1"]/table[2]') %>%
html_table(fill=TRUE)
population <- population[[1]]
db= population[3:18,1:3]
db = setNames(data.frame(t(db[,-2])), db[,2])
colnames(db)[1] <- "team"
db$team = str_sub(db$team, start= -3)
db$date = str_sub(
str_split_fixed(string = url, pattern = "gamecode=", n= 2)[,2],
end = 8)
db$Opponent[1] = db$team[2]
db$Opponent[2] = db$team[1]
db$GameID = paste0(db$team[1],'v',db$team[2],db$date[1])
db$home_away = if_else(db$team==db$team[1],'home','away')
if(count==0){
combineddb = db }
else {
combineddb= rbind(combineddb,db) }
count = count+1
print(count)
}
beepr::beep(sound=1)
#removing unnecessary tables
rm(db, population)
##checking data types
# str(combineddb)
# str(combineddb)
# combineddb$Shots = as.numeric(as.character(combineddb$Shots))
# combineddb$Passes = as.numeric(as.character(combineddb$Passes))
# combineddb$`Shots on Goal` = as.numeric(as.character(combineddb$`Shots on Goal`))
View(combineddb)
setwd("C:/Users/hoffmads/Dropbox/DataProjects/epl")
write.csv(combineddb,file = 'data_10262017.csv')
